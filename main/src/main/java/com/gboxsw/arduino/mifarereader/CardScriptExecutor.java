package com.gboxsw.arduino.mifarereader;

import java.util.Scanner;

public class CardScriptExecutor {

	private final CardReader cardReader;

	public CardScriptExecutor(CardReader cardReader) {
		this.cardReader = cardReader;
	}

	public boolean execute(String script, StringBuilder output) {
		try (Scanner lineScanner = new Scanner(script)) {
			while (lineScanner.hasNextLine()) {
				String line = lineScanner.nextLine().trim();
				if (line.isEmpty() || line.startsWith("#")) {
					continue;
				}

				if (!executeCommand(line, output)) {
					return false;
				}
			}
		}

		return true;
	}

	/**
	 * Executes a simple command.
	 * 
	 * @param command
	 *            the command to be executed.
	 * @param output
	 *            the collector of output generated by commands
	 * @return true, if the command was executed successfully, false otherwise.
	 */
	private boolean executeCommand(String command, StringBuilder output) {
		try (Scanner commandScanner = new Scanner(command)) {
			switch (commandScanner.next()) {
			case "SetKeyA":
				return setKey(true, commandScanner);
			case "SetKeyB":
				return setKey(false, commandScanner);
			case "ReadBlock":
				return readBlock(commandScanner, output);
			default:
				throw new IllegalArgumentException("Unknown command: " + command);
			}
		}
	}

	private boolean setKey(boolean aKey, Scanner commandScanner) {
		byte[] key = readHexData(commandScanner.next());
		if (key.length != 6) {
			throw new IllegalArgumentException("The length of the key must 6.");
		}

		if (aKey) {
			return cardReader.setKeyA(key);
		} else {
			return cardReader.setKeyB(key);
		}
	}

	private boolean readBlock(Scanner commandScanner, StringBuilder output) {
		int block;
		try {
			block = commandScanner.nextInt();
		} catch (Exception e) {
			throw new IllegalArgumentException("Invalid block.");
		}

		byte[] blockData = cardReader.readBlock(block);
		if (blockData == null) {
			return false;
		}

		if (output != null) {
			output.append(printHexData(blockData) + "\n");
		}

		return true;
	}

	private static byte[] readHexData(String hexData) {
		hexData = hexData.trim().toUpperCase().replaceAll("_", "");
		if (hexData.length() % 2 != 0) {
			throw new IllegalArgumentException("Invalid hex data.");
		}

		byte[] result = new byte[hexData.length() / 2];
		for (int i = 0; i < result.length; i++) {
			result[i] = (byte) Integer.parseInt(hexData.substring(2 * i, 2 * (i + 1)), 16);
		}

		return result;
	}

	private static String printHexData(byte[] data) {
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < data.length; i++) {
			String hexByte = Integer.toHexString(data[i] & 0xFF);
			if (hexByte.length() == 0) {
				sb.append("0" + hexByte);
			} else {
				sb.append(hexByte);
			}
		}

		return sb.toString();
	}
}
